name: Detect Changes

on:
  workflow_call:
    outputs:
      deploy_functions:
        description: "Should deploy functions?"
        value: ${{ jobs.detect.outputs.deploy_functions }}
      deploy_hosting:
        description: "Should deploy hosting?"
        value: ${{ jobs.detect.outputs.deploy_hosting }}

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      deploy_functions: ${{ steps.check_changes.outputs.deploy_functions }}
      deploy_hosting: ${{ steps.check_changes.outputs.deploy_hosting }}
    steps:
      - name: Checkout Repository (Ensure Full History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to ensure diff works

      - name: Fetch Main Branch
        run: |
          git fetch origin main --depth=1
          git branch --track main origin/main || true

      - name: Determine Base Commit
        id: determine_base
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA=$(git merge-base origin/main HEAD)
          else
            BASE_SHA="origin/main"
          fi
          echo "BASE_SHA=$BASE_SHA" >> "$GITHUB_ENV"
          echo "Comparing against: $BASE_SHA"

      - name: Detect Changes
        id: check_changes
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA HEAD)
          echo "Changed files: $CHANGED_FILES"

          # Debug: Ensure we list all changes
          echo "===== CHANGED FILES ====="
          echo "$CHANGED_FILES"
          echo "========================="

          # Detect Functions changes (Fixing nested path detection)
          if echo "$CHANGED_FILES" | grep -E '^functions/' > /dev/null; then
            echo "Deploying Functions!"
            echo "deploy_functions=true" >> "$GITHUB_ENV"
            echo "deploy_functions=true" >> "$GITHUB_OUTPUT"
          else
            echo "No function changes detected."
            echo "deploy_functions=false" >> "$GITHUB_ENV"
            echo "deploy_functions=false" >> "$GITHUB_OUTPUT"
          fi

          # Detect Hosting (public/) changes
          if echo "$CHANGED_FILES" | grep -E '^public/|^firebase.json' > /dev/null; then
            echo "Deploying Hosting!"
            echo "deploy_hosting=true" >> "$GITHUB_ENV"
            echo "deploy_hosting=true" >> "$GITHUB_OUTPUT"
          else
            echo "No hosting changes detected."
            echo "deploy_hosting=false" >> "$GITHUB_ENV"
            echo "deploy_hosting=false" >> "$GITHUB_OUTPUT"
          fi
